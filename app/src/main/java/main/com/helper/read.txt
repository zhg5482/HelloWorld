package com.net;

import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.URL;

import org.json.JSONException;
import org.json.JSONObject;

import android.app.Activity;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.Toast;

import com.httphtmlchakanqi.R;
import com.utils.HttpUtils;
/**
 * 通过接口，获取网络的信息，然后经过JSON解析，显示在屏幕上。
 * 方法一：
 * @author Administrator
 *
 */
public class MainActivity extends Activity implements OnClickListener {
    private EditText editText;
    private Button button;
    private TextView textView;
    private final int SUCCESS = 1;
    private final int FAILURE = 0;
    private final int ERRORCODE = 2;
    protected String weatherResult;

    private Handler handler = new Handler() {
        public void handleMessage(Message msg) {
            switch (msg.what) {
            case SUCCESS:
                /**
                 * 获取信息成功后，对该信息进行JSON解析，得到所需要的信息，然后在textView上展示出来。
                 */
                JSONAnalysis(msg.obj.toString());
                Toast.makeText(MainActivity.this, "获取数据成功", Toast.LENGTH_SHORT)
                .show();
                break;

            case FAILURE:
                Toast.makeText(MainActivity.this, "获取数据失败", Toast.LENGTH_SHORT)
                        .show();
                break;

            case ERRORCODE:
                Toast.makeText(MainActivity.this, "获取的CODE码不为200！",
                        Toast.LENGTH_SHORT).show();
                break;
            default:
                break;
            }
        };
    };

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        /**
         * 初始化
         */
        init();
    }

    private void init() {
        editText = (EditText) findViewById(R.id.editText);
        button = (Button) findViewById(R.id.button);
        textView = (TextView) findViewById(R.id.textViewContent);
        button.setOnClickListener(this);
    }

    /**
     * JSON解析方法
     */
    protected void JSONAnalysis(String string) {
        JSONObject object = null;
        try {
            object = new JSONObject(string);
        } catch (JSONException e) {
            e.printStackTrace();
        }
        /**
         * 在你获取的string这个JSON对象中，提取你所需要的信息。
         */
        JSONObject ObjectInfo = object.optJSONObject("weatherinfo");
        String city = ObjectInfo.optString("city");
        String date = ObjectInfo.optString("date_y");
        String week = ObjectInfo.optString("week");
        String temp = ObjectInfo.optString("temp1");
        String weather = ObjectInfo.optString("weather1");
        String index = ObjectInfo.optString("index_d");

        weatherResult = "城市：" + city + "\n日期：" + date + "\n星期：" + week
                + "\n温度：" + temp + "\n天气情况：" + weather + "\n穿衣指数：" + index;
        textView.setText(weatherResult);
    }

    @Override
    public void onClick(View v) {
        switch (v.getId()) {
        case R.id.button:
            /**
             * 点击按钮事件，在主线程中开启一个子线程进行网络请求
             * （因为在4.0只有不支持主线程进行网络请求，所以一般情况下，建议另开启子线程进行网络请求等耗时操作）。
             */
            new Thread() {
                public void run() {
                    int code;
                    try {
                        String path = editText.getText().toString();
                        URL url = new URL(path);
                        /**
                         * 这里网络请求使用的是类HttpURLConnection，另外一种可以选择使用类HttpClient。
                         */
                        HttpURLConnection conn = (HttpURLConnection) url
                                .openConnection();
                        conn.setRequestMethod("GET");//使用GET方法获取
                        conn.setConnectTimeout(5000);
                        code = conn.getResponseCode();
                        if (code == 200) {
                            /**
                             * 如果获取的code为200，则证明数据获取是正确的。
                             */
                            InputStream is = conn.getInputStream();
                            String result = HttpUtils.readMyInputStream(is);

                            /**
                             * 子线程发送消息到主线程，并将获取的结果带到主线程，让主线程来更新UI。
                             */
                            Message msg = new Message();
                            msg.obj = result;
                            msg.what = SUCCESS;
                            handler.sendMessage(msg);

                        } else {

                            Message msg = new Message();
                            msg.what = ERRORCODE;
                            handler.sendMessage(msg);
                        }
                    } catch (Exception e) {

                        e.printStackTrace();
                        /**
                         * 如果获取失败，或出现异常，那么子线程发送失败的消息（FAILURE）到主线程，主线程显示Toast，来告诉使用者，数据获取是失败。
                         */
                        Message msg = new Message();
                        msg.what = FAILURE;
                        handler.sendMessage(msg);
                    }
                };
            }.start();
            break;

        default:
            break;
        }
    }

}